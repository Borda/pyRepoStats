name: CI testing

# see: https://help.github.com/en/actions/reference/events-that-trigger-workflows
on:  # Trigger the workflow on push or pull request, but only for the master branch
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  pytester:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        python-version: ["3.8", "3.10"]
        requires: ['latest']  # 'minimal',

    env:
      # suppress showing figures as it may bail on server without display
      SHOW_FIGURE: 0
    # Timeout: https://stackoverflow.com/a/59076067/4521646
    timeout-minutes: 15

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - name: Set min. dependencies
      if: matrix.requires == 'oldest'
      run: |
        python -c "fname = 'requirements.txt' ; req = open(fname).read().replace('>=', '==') ; open(fname, 'w').write(req)"
        python -c "fname = 'tests/requirements.txt' ; req = open(fname).read().replace('>=', '==') ; open(fname, 'w').write(req)"

    # Note: This uses an internal pip API and may not always work
    # https://github.com/actions/cache/blob/master/examples.md#multiple-oss-in-a-workflow
    #- name: Get pip cache
    #  id: pip-cache
    #  run: echo "dir=$(pip cache dir)" >> $GITHUB_OUTPUT
    #- name: Cache pip
    #  uses: actions/cache@v2
    #  with:
    #    path: ${{ steps.pip-cache.outputs.dir }}
    #    key: ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.requires }}-${{ hashFiles('requirements.txt') }}
    #    restore-keys: |
    #      ${{ runner.os }}-pip-py${{ matrix.python-version }}-${{ matrix.requires }}-

    - name: Install dependencies
      run: |
        pip --version
        pip install -e . -r tests/requirements.txt
        pip list

    - name: Tests and coverage
      env:
        GH_API_TOKEN: ${{ secrets.API_TOKEN }}
      run: python -m pytest src/ tests/ -v --cov=repo_stats --durations=25

    - name: Statistics
      run: |
        coverage report
        coverage xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: coverage.xml
        fail_ci_if_error: false

    - name: Run sample
      run: |
        mkdir results
        python -m repo_stats -gh borda/pyrepo_stats -o results -t ${{ secrets.API_TOKEN }}
        ls -l results


  testing-guardian:
    runs-on: ubuntu-latest
    needs: pytester
    if: always()
    steps:
    - run: echo "${{ needs.pytester.result }}"
    - name: failing...
      if: needs.pytester.result == 'failure'
      run: exit 1
    - name: cancelled or skipped...
      if: contains(fromJSON('["cancelled", "skipped"]'), needs.pytester.result)
      timeout-minutes: 1
      run: sleep 90
